plugins {
    id "com.moowork.node" version "1.3.1"
}

node {
    version = '12.18.3'
    npmVersion = '6.14.7'
    download = true
}

task clean(type: Delete) {
    delete './build'
}

task compileTypeScript(type: NodeTask, dependsOn: [npmInstall]) {
    script = file('node_modules/typescript/bin/tsc')
    String srcDir = 'src/ts'
    String outDir = 'build/typescript'
    args = ['-p', srcDir, '--outDir', outDir]
    inputs.dir srcDir
    outputs.dir outDir
}

task webpack(type: NodeTask, dependsOn: [npmInstall, compileTypeScript]) {
    script = file('node_modules/webpack/bin/webpack')
    inputs.dir 'build/typescript'
    outputs.dir 'build/webpack'
}
task webpackClean(type: Delete) { delete 'build/webpack' }
clean.dependsOn webpackClean

task ghPagesRawFiles(type: Copy) {
    from 'src/rawFiles/'
    into 'build/gh-pages/'
}
task ghPagesJavaScript(type: Copy, dependsOn: webpack) {
    from 'build/webpack/'
    into 'build/gh-pages/demo'
}
task ghPages(dependsOn: [ghPagesRawFiles, ghPagesJavaScript])

task assemble(dependsOn: ghPages)

task check // do nothing

task build(dependsOn: [assemble, check])

task commitToGhPagesBranch(dependsOn: build) {
    doLast {
        sh 'git add -f ./build/gh-pages'
        String treeObjId =
                sh('git write-tree --prefix=demo/web/build/gh-pages', doChomp: true)
        String commitMessage = "Built on `:demo:web` project at ${new Date()}"
        String commitId =
                sh("git commit-tree -p gh-pages -m \"${commitMessage}\" ${treeObjId}", doChomp: true)
        sh "git update-ref refs/heads/gh-pages ${commitId}"
        sh 'git reset -- ./build/gh-pages'
    }
}

def sh(Map opts = [:], String command) {
    Process p = command.execute(null, project.projectDir)
    try {
        p.waitFor()
        if (p.exitValue() == 0) {
            String res = p.text
            return opts.doChomp ? res.replaceFirst(/(?:\r\n|\n|\r)\z/, '') : res
        } else {
            String errText = p.err.text
            throw new RuntimeException(
                    'Error occurred on command execution ' +
                    "(command: ${command}, exit code: ${p.exitValue()}, text: ${errText}")
        }
    } finally {
        p.closeStreams()
    }
}
